`include "cmos_cells.v"
/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

(* src = "clkgen.v:1" *)
module clkgen_s(clkf, clk2f, clk4f, clk8f, reset);
  (* src = "clkgen.v:12" *)
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  (* src = "clkgen.v:19" *)
  wire _5_;
  (* src = "clkgen.v:3" *)
  output clk2f;
  (* src = "clkgen.v:4" *)
  output clk4f;
  (* src = "clkgen.v:5" *)
  input clk8f;
  (* src = "clkgen.v:2" *)
  output clkf;
  (* src = "clkgen.v:6" *)
  input reset;
  NOT _6_ (
    .A(_2_),
    .Y(_4_)
  );
  NOR _7_ (
    .A(_4_),
    .B(_1_),
    .Y(_3_)
  );
  DFF _8_ (
    .C(clk8f),
    .D(_0_),
    .Q(clk4f)
  );
  assign clk2f = 1'b0;
  assign clkf = 1'b0;
  assign _1_ = clk4f;
  assign _2_ = reset;
  assign _0_ = _3_;
endmodule

(* src = "demux.v:1" *)
module demux_s(data_out_0_s, valid_out_0_s, data_out_1_s, valid_out_1_s, data_in_c, valid_in_c, reset, clk2f, clk8f);
  (* src = "demux.v:9" *)
  input clk2f;
  (* src = "demux.v:10" *)
  input clk8f;
  (* src = "demux.v:6" *)
  input [7:0] data_in_c;
  (* src = "demux.v:2" *)
  output [7:0] data_out_0_s;
  (* src = "demux.v:4" *)
  output [7:0] data_out_1_s;
  (* src = "demux.v:8" *)
  input reset;
  (* src = "demux.v:7" *)
  input valid_in_c;
  (* src = "demux.v:3" *)
  output valid_out_0_s;
  (* src = "demux.v:5" *)
  output valid_out_1_s;
  assign data_out_0_s = 8'b00000000;
  assign data_out_1_s = 8'b00000000;
  assign valid_out_0_s = 1'b0;
  assign valid_out_1_s = 1'b0;
endmodule

(* src = "mux.v:1" *)
module mux_s(data_out_c, valid_out_c, data_in_0_c, valid_in_0_c, data_in_1_c, valid_in_1_c, reset, clk2f, clk8f);
  (* src = "mux.v:9" *)
  input clk2f;
  (* src = "mux.v:10" *)
  input clk8f;
  (* src = "mux.v:4" *)
  input [7:0] data_in_0_c;
  (* src = "mux.v:6" *)
  input [7:0] data_in_1_c;
  (* src = "mux.v:2" *)
  output [7:0] data_out_c;
  (* src = "mux.v:8" *)
  input reset;
  (* src = "mux.v:5" *)
  input valid_in_0_c;
  (* src = "mux.v:7" *)
  input valid_in_1_c;
  (* src = "mux.v:3" *)
  output valid_out_c;
  assign data_out_c = 8'b00000000;
  assign valid_out_c = 1'b0;
endmodule

(* top =  1  *)
(* src = "proy1_conductual.v:5" *)
module proy1_synth(data_out_0_s, valid_out_0_s, data_out_1_s, valid_out_1_s, data_in_0, valid_in_0, data_in_1, valid_in_1, reset, clk8f, clkf_s, clk2f_s, clk4f_s);
  (* src = "proy1_conductual.v:17" *)
  output clk2f_s;
  (* src = "proy1_conductual.v:18" *)
  output clk4f_s;
  (* src = "proy1_conductual.v:15" *)
  input clk8f;
  (* src = "proy1_conductual.v:16" *)
  output clkf_s;
  (* src = "proy1_conductual.v:10" *)
  input [7:0] data_in_0;
  (* src = "proy1_conductual.v:12" *)
  input [7:0] data_in_1;
  (* src = "proy1_conductual.v:20" *)
  wire [7:0] data_mid_s;
  (* src = "proy1_conductual.v:6" *)
  output [7:0] data_out_0_s;
  (* src = "proy1_conductual.v:8" *)
  output [7:0] data_out_1_s;
  (* src = "proy1_conductual.v:14" *)
  input reset;
  (* src = "proy1_conductual.v:11" *)
  output valid_in_0;
  (* src = "proy1_conductual.v:13" *)
  output valid_in_1;
  (* src = "proy1_conductual.v:21" *)
  wire valid_mid_s;
  (* src = "proy1_conductual.v:7" *)
  output valid_out_0_s;
  (* src = "proy1_conductual.v:9" *)
  output valid_out_1_s;
  (* src = "proy1_conductual.v:37" *)
  demux_s demux_ (
    .clk2f(clk2f_s),
    .clk8f(clk8f),
    .data_in_c(data_mid_s),
    .data_out_0_s(data_out_0_s),
    .data_out_1_s(data_out_1_s),
    .reset(reset),
    .valid_in_c(valid_mid_s),
    .valid_out_0_s(valid_out_0_s),
    .valid_out_1_s(valid_out_1_s)
  );
  (* src = "proy1_conductual.v:24" *)
  clkgen_s generador_de_relojes (
    .clk2f(clk2f_s),
    .clk4f(clk4f_s),
    .clk8f(clk8f),
    .clkf(clkf_s),
    .reset(reset)
  );
  (* src = "proy1_conductual.v:26" *)
  mux_s mux_ (
    .clk2f(clk2f_s),
    .clk8f(clk8f),
    .data_in_0_c(data_in_0),
    .data_in_1_c(data_in_1),
    .data_out_c(data_mid_s),
    .reset(reset),
    .valid_in_0_c(valid_in_0),
    .valid_in_1_c(valid_in_1),
    .valid_out_c(valid_mid_s)
  );
endmodule
