`include "cmos.v"
/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

(* src = "Byte_un_striping_cond.v:1" *)
module Byte_un_striping_estr(clk_f, clk_2f, lane_0, lane_1, valid_0, valid_1, reset, data_out_e, valid_out_e);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  (* src = "Byte_un_striping_cond.v:3" *)
  input clk_2f;
  (* src = "Byte_un_striping_cond.v:2" *)
  input clk_f;
  (* src = "Byte_un_striping_cond.v:9" *)
  output [7:0] data_out_e;
  (* onehot = 32'd1 *)
  wire [2:0] estado;
  (* src = "Byte_un_striping_cond.v:4" *)
  input [7:0] lane_0;
  (* src = "Byte_un_striping_cond.v:5" *)
  input [7:0] lane_1;
  (* src = "Byte_un_striping_cond.v:8" *)
  input reset;
  (* src = "Byte_un_striping_cond.v:6" *)
  input valid_0;
  (* src = "Byte_un_striping_cond.v:7" *)
  input valid_1;
  (* src = "Byte_un_striping_cond.v:10" *)
  output valid_out_e;
  NOT _34_ (
    .A(valid_0),
    .Y(_01_)
  );
  NOT _35_ (
    .A(estado[1]),
    .Y(_02_)
  );
  NOT _36_ (
    .A(estado[0]),
    .Y(_03_)
  );
  NAND _37_ (
    .A(_03_),
    .B(_02_),
    .Y(_04_)
  );
  NAND _38_ (
    .A(_04_),
    .B(_01_),
    .Y(_05_)
  );
  NOT _39_ (
    .A(reset),
    .Y(_06_)
  );
  NOT _40_ (
    .A(estado[2]),
    .Y(_07_)
  );
  NOR _41_ (
    .A(_07_),
    .B(valid_1),
    .Y(_08_)
  );
  NOR _42_ (
    .A(_08_),
    .B(_06_),
    .Y(_09_)
  );
  NAND _43_ (
    .A(_09_),
    .B(_05_),
    .Y(_00_)
  );
  NAND _44_ (
    .A(estado[2]),
    .B(valid_1),
    .Y(_10_)
  );
  NAND _45_ (
    .A(_04_),
    .B(valid_0),
    .Y(_11_)
  );
  NAND _46_ (
    .A(_11_),
    .B(_10_),
    .Y(valid_out_e)
  );
  NOT _47_ (
    .A(valid_1),
    .Y(_12_)
  );
  NOR _48_ (
    .A(_07_),
    .B(_12_),
    .Y(_13_)
  );
  NAND _49_ (
    .A(_13_),
    .B(lane_1[0]),
    .Y(_14_)
  );
  NOR _50_ (
    .A(estado[0]),
    .B(estado[1]),
    .Y(_15_)
  );
  NOR _51_ (
    .A(_15_),
    .B(_01_),
    .Y(_16_)
  );
  NAND _52_ (
    .A(_16_),
    .B(lane_0[0]),
    .Y(_17_)
  );
  NAND _53_ (
    .A(_17_),
    .B(_14_),
    .Y(data_out_e[0])
  );
  NAND _54_ (
    .A(_13_),
    .B(lane_1[1]),
    .Y(_18_)
  );
  NAND _55_ (
    .A(_16_),
    .B(lane_0[1]),
    .Y(_19_)
  );
  NAND _56_ (
    .A(_19_),
    .B(_18_),
    .Y(data_out_e[1])
  );
  NAND _57_ (
    .A(_13_),
    .B(lane_1[2]),
    .Y(_20_)
  );
  NAND _58_ (
    .A(_16_),
    .B(lane_0[2]),
    .Y(_21_)
  );
  NAND _59_ (
    .A(_21_),
    .B(_20_),
    .Y(data_out_e[2])
  );
  NAND _60_ (
    .A(_13_),
    .B(lane_1[3]),
    .Y(_22_)
  );
  NAND _61_ (
    .A(_16_),
    .B(lane_0[3]),
    .Y(_23_)
  );
  NAND _62_ (
    .A(_23_),
    .B(_22_),
    .Y(data_out_e[3])
  );
  NAND _63_ (
    .A(_13_),
    .B(lane_1[4]),
    .Y(_24_)
  );
  NAND _64_ (
    .A(_16_),
    .B(lane_0[4]),
    .Y(_25_)
  );
  NAND _65_ (
    .A(_25_),
    .B(_24_),
    .Y(data_out_e[4])
  );
  NAND _66_ (
    .A(_13_),
    .B(lane_1[5]),
    .Y(_26_)
  );
  NAND _67_ (
    .A(_16_),
    .B(lane_0[5]),
    .Y(_27_)
  );
  NAND _68_ (
    .A(_27_),
    .B(_26_),
    .Y(data_out_e[5])
  );
  NAND _69_ (
    .A(_13_),
    .B(lane_1[6]),
    .Y(_28_)
  );
  NAND _70_ (
    .A(_16_),
    .B(lane_0[6]),
    .Y(_29_)
  );
  NAND _71_ (
    .A(_29_),
    .B(_28_),
    .Y(data_out_e[6])
  );
  NAND _72_ (
    .A(_13_),
    .B(lane_1[7]),
    .Y(_30_)
  );
  NAND _73_ (
    .A(_16_),
    .B(lane_0[7]),
    .Y(_31_)
  );
  NAND _74_ (
    .A(_31_),
    .B(_30_),
    .Y(data_out_e[7])
  );
  NOR _75_ (
    .A(_10_),
    .B(_06_),
    .Y(_32_)
  );
  NOR _76_ (
    .A(_11_),
    .B(_06_),
    .Y(_33_)
  );
  DFF _77_ (
    .C(clk_2f),
    .D(_00_),
    .Q(estado[0])
  );
  DFF _78_ (
    .C(clk_2f),
    .D(_32_),
    .Q(estado[1])
  );
  DFF _79_ (
    .C(clk_2f),
    .D(_33_),
    .Q(estado[2])
  );
endmodule

(* src = "Serie_Paralelo.v:2" *)
module Serie_Paralelo_estr(clk_8f, clk_f, data_in, reset, valid_out_e, parallel_out_e);
  (* src = "Serie_Paralelo.v:43" *)
  wire [2:0] _000_;
  (* src = "Serie_Paralelo.v:43" *)
  wire [7:0] _001_;
  (* src = "Serie_Paralelo.v:43" *)
  wire [2:0] _002_;
  (* src = "Serie_Paralelo.v:30" *)
  wire [7:0] _003_;
  (* src = "Serie_Paralelo.v:30" *)
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  (* src = "Serie_Paralelo.v:12" *)
  wire [2:0] BC_counter;
  (* src = "Serie_Paralelo.v:11" *)
  wire [7:0] Data_P;
  (* src = "Serie_Paralelo.v:12" *)
  wire [2:0] bit_counter;
  (* src = "Serie_Paralelo.v:2" *)
  input clk_8f;
  (* src = "Serie_Paralelo.v:3" *)
  input clk_f;
  (* src = "Serie_Paralelo.v:4" *)
  input data_in;
  (* src = "Serie_Paralelo.v:7" *)
  output [7:0] parallel_out_e;
  (* src = "Serie_Paralelo.v:5" *)
  input reset;
  (* src = "Serie_Paralelo.v:6" *)
  output valid_out_e;
  NOT _089_ (
    .A(bit_counter[2]),
    .Y(_037_)
  );
  NAND _090_ (
    .A(bit_counter[1]),
    .B(bit_counter[0]),
    .Y(_038_)
  );
  NOR _091_ (
    .A(_038_),
    .B(_037_),
    .Y(_039_)
  );
  NOR _092_ (
    .A(_039_),
    .B(Data_P[7]),
    .Y(_040_)
  );
  NOT _093_ (
    .A(data_in),
    .Y(_041_)
  );
  NAND _094_ (
    .A(_039_),
    .B(_041_),
    .Y(_042_)
  );
  NAND _095_ (
    .A(_042_),
    .B(reset),
    .Y(_043_)
  );
  NOR _096_ (
    .A(_043_),
    .B(_040_),
    .Y(_001_[7])
  );
  NOT _097_ (
    .A(bit_counter[0]),
    .Y(_044_)
  );
  NAND _098_ (
    .A(bit_counter[1]),
    .B(_044_),
    .Y(_045_)
  );
  NOR _099_ (
    .A(_045_),
    .B(_037_),
    .Y(_046_)
  );
  NOR _100_ (
    .A(_046_),
    .B(Data_P[6]),
    .Y(_047_)
  );
  NAND _101_ (
    .A(_046_),
    .B(_041_),
    .Y(_048_)
  );
  NAND _102_ (
    .A(_048_),
    .B(reset),
    .Y(_049_)
  );
  NOR _103_ (
    .A(_049_),
    .B(_047_),
    .Y(_001_[6])
  );
  NOT _104_ (
    .A(bit_counter[1]),
    .Y(_050_)
  );
  NAND _105_ (
    .A(_050_),
    .B(bit_counter[0]),
    .Y(_051_)
  );
  NOR _106_ (
    .A(_051_),
    .B(_037_),
    .Y(_052_)
  );
  NOR _107_ (
    .A(_052_),
    .B(Data_P[5]),
    .Y(_053_)
  );
  NAND _108_ (
    .A(_052_),
    .B(_041_),
    .Y(_054_)
  );
  NAND _109_ (
    .A(_054_),
    .B(reset),
    .Y(_055_)
  );
  NOR _110_ (
    .A(_055_),
    .B(_053_),
    .Y(_001_[5])
  );
  NOR _111_ (
    .A(bit_counter[1]),
    .B(bit_counter[0]),
    .Y(_056_)
  );
  NAND _112_ (
    .A(_056_),
    .B(bit_counter[2]),
    .Y(_057_)
  );
  NOR _113_ (
    .A(_057_),
    .B(data_in),
    .Y(_058_)
  );
  NOT _114_ (
    .A(Data_P[4]),
    .Y(_059_)
  );
  NAND _115_ (
    .A(_057_),
    .B(_059_),
    .Y(_060_)
  );
  NAND _116_ (
    .A(_060_),
    .B(reset),
    .Y(_061_)
  );
  NOR _117_ (
    .A(_061_),
    .B(_058_),
    .Y(_001_[4])
  );
  NOR _118_ (
    .A(_038_),
    .B(bit_counter[2]),
    .Y(_062_)
  );
  NOR _119_ (
    .A(_062_),
    .B(Data_P[3]),
    .Y(_063_)
  );
  NAND _120_ (
    .A(_062_),
    .B(_041_),
    .Y(_064_)
  );
  NAND _121_ (
    .A(_064_),
    .B(reset),
    .Y(_065_)
  );
  NOR _122_ (
    .A(_065_),
    .B(_063_),
    .Y(_001_[3])
  );
  NOR _123_ (
    .A(_045_),
    .B(bit_counter[2]),
    .Y(_066_)
  );
  NOR _124_ (
    .A(_066_),
    .B(Data_P[2]),
    .Y(_067_)
  );
  NAND _125_ (
    .A(_066_),
    .B(_041_),
    .Y(_068_)
  );
  NAND _126_ (
    .A(_068_),
    .B(reset),
    .Y(_069_)
  );
  NOR _127_ (
    .A(_069_),
    .B(_067_),
    .Y(_001_[2])
  );
  NOR _128_ (
    .A(_051_),
    .B(bit_counter[2]),
    .Y(_070_)
  );
  NOR _129_ (
    .A(_070_),
    .B(Data_P[1]),
    .Y(_071_)
  );
  NAND _130_ (
    .A(_070_),
    .B(_041_),
    .Y(_072_)
  );
  NAND _131_ (
    .A(_072_),
    .B(reset),
    .Y(_073_)
  );
  NOR _132_ (
    .A(_073_),
    .B(_071_),
    .Y(_001_[1])
  );
  NOT _133_ (
    .A(reset),
    .Y(_074_)
  );
  NAND _134_ (
    .A(_056_),
    .B(_037_),
    .Y(_075_)
  );
  NOR _135_ (
    .A(_075_),
    .B(_041_),
    .Y(_076_)
  );
  NOT _136_ (
    .A(Data_P[0]),
    .Y(_077_)
  );
  NOT _137_ (
    .A(_075_),
    .Y(_078_)
  );
  NOR _138_ (
    .A(_078_),
    .B(_077_),
    .Y(_079_)
  );
  NOR _139_ (
    .A(_079_),
    .B(_076_),
    .Y(_080_)
  );
  NOR _140_ (
    .A(_080_),
    .B(_074_),
    .Y(_001_[0])
  );
  NOT _141_ (
    .A(BC_counter[0]),
    .Y(_081_)
  );
  NOT _142_ (
    .A(Data_P[5]),
    .Y(_082_)
  );
  NOR _143_ (
    .A(_059_),
    .B(_082_),
    .Y(_083_)
  );
  NOT _144_ (
    .A(Data_P[3]),
    .Y(_084_)
  );
  NOT _145_ (
    .A(Data_P[2]),
    .Y(_085_)
  );
  NOR _146_ (
    .A(_085_),
    .B(_084_),
    .Y(_086_)
  );
  NAND _147_ (
    .A(_086_),
    .B(_083_),
    .Y(_087_)
  );
  NOR _148_ (
    .A(Data_P[6]),
    .B(Data_P[1]),
    .Y(_088_)
  );
  NOT _149_ (
    .A(Data_P[7]),
    .Y(_005_)
  );
  NOR _150_ (
    .A(_005_),
    .B(Data_P[0]),
    .Y(_006_)
  );
  NAND _151_ (
    .A(_006_),
    .B(_088_),
    .Y(_007_)
  );
  NOR _152_ (
    .A(_007_),
    .B(_087_),
    .Y(_008_)
  );
  NAND _153_ (
    .A(_008_),
    .B(_078_),
    .Y(_009_)
  );
  NAND _154_ (
    .A(_009_),
    .B(_081_),
    .Y(_010_)
  );
  NAND _155_ (
    .A(_010_),
    .B(reset),
    .Y(_011_)
  );
  NOR _156_ (
    .A(_009_),
    .B(_081_),
    .Y(_012_)
  );
  NOR _157_ (
    .A(_012_),
    .B(_011_),
    .Y(_000_[0])
  );
  NOT _158_ (
    .A(BC_counter[1]),
    .Y(_013_)
  );
  NAND _159_ (
    .A(Data_P[4]),
    .B(Data_P[5]),
    .Y(_014_)
  );
  NAND _160_ (
    .A(Data_P[2]),
    .B(Data_P[3]),
    .Y(_015_)
  );
  NOR _161_ (
    .A(_015_),
    .B(_014_),
    .Y(_016_)
  );
  NOT _162_ (
    .A(_088_),
    .Y(_017_)
  );
  NAND _163_ (
    .A(Data_P[7]),
    .B(_077_),
    .Y(_018_)
  );
  NOR _164_ (
    .A(_018_),
    .B(_017_),
    .Y(_019_)
  );
  NAND _165_ (
    .A(_019_),
    .B(_016_),
    .Y(_020_)
  );
  NOR _166_ (
    .A(_020_),
    .B(_075_),
    .Y(_021_)
  );
  NAND _167_ (
    .A(_021_),
    .B(BC_counter[0]),
    .Y(_022_)
  );
  NAND _168_ (
    .A(_022_),
    .B(_013_),
    .Y(_023_)
  );
  NAND _169_ (
    .A(_023_),
    .B(reset),
    .Y(_024_)
  );
  NAND _170_ (
    .A(_012_),
    .B(BC_counter[1]),
    .Y(_025_)
  );
  NOT _171_ (
    .A(_025_),
    .Y(_026_)
  );
  NOR _172_ (
    .A(_026_),
    .B(_024_),
    .Y(_000_[1])
  );
  NOT _173_ (
    .A(BC_counter[2]),
    .Y(_027_)
  );
  NAND _174_ (
    .A(_025_),
    .B(_027_),
    .Y(_028_)
  );
  NAND _175_ (
    .A(_028_),
    .B(reset),
    .Y(_029_)
  );
  NOR _176_ (
    .A(_025_),
    .B(_027_),
    .Y(_030_)
  );
  NOR _177_ (
    .A(_030_),
    .B(_029_),
    .Y(_000_[2])
  );
  NAND _178_ (
    .A(reset),
    .B(bit_counter[0]),
    .Y(_002_[0])
  );
  NOR _179_ (
    .A(_056_),
    .B(_074_),
    .Y(_031_)
  );
  NAND _180_ (
    .A(_031_),
    .B(_038_),
    .Y(_002_[1])
  );
  NOR _181_ (
    .A(_056_),
    .B(_037_),
    .Y(_032_)
  );
  NOR _182_ (
    .A(_032_),
    .B(_074_),
    .Y(_033_)
  );
  NAND _183_ (
    .A(_033_),
    .B(_075_),
    .Y(_002_[2])
  );
  NAND _184_ (
    .A(_020_),
    .B(BC_counter[2]),
    .Y(_034_)
  );
  NOR _185_ (
    .A(_034_),
    .B(_077_),
    .Y(_003_[0])
  );
  NOT _186_ (
    .A(Data_P[1]),
    .Y(_035_)
  );
  NOR _187_ (
    .A(_034_),
    .B(_035_),
    .Y(_003_[1])
  );
  NOR _188_ (
    .A(_034_),
    .B(_085_),
    .Y(_003_[2])
  );
  NOR _189_ (
    .A(_034_),
    .B(_084_),
    .Y(_003_[3])
  );
  NOR _190_ (
    .A(_034_),
    .B(_059_),
    .Y(_003_[4])
  );
  NOR _191_ (
    .A(_034_),
    .B(_082_),
    .Y(_003_[5])
  );
  NOT _192_ (
    .A(Data_P[6]),
    .Y(_036_)
  );
  NOR _193_ (
    .A(_034_),
    .B(_036_),
    .Y(_003_[6])
  );
  NOR _194_ (
    .A(_034_),
    .B(_005_),
    .Y(_003_[7])
  );
  NOT _195_ (
    .A(_034_),
    .Y(_004_)
  );
  DFF _196_ (
    .C(clk_8f),
    .D(_001_[0]),
    .Q(Data_P[0])
  );
  DFF _197_ (
    .C(clk_8f),
    .D(_001_[1]),
    .Q(Data_P[1])
  );
  DFF _198_ (
    .C(clk_8f),
    .D(_001_[2]),
    .Q(Data_P[2])
  );
  DFF _199_ (
    .C(clk_8f),
    .D(_001_[3]),
    .Q(Data_P[3])
  );
  DFF _200_ (
    .C(clk_8f),
    .D(_001_[4]),
    .Q(Data_P[4])
  );
  DFF _201_ (
    .C(clk_8f),
    .D(_001_[5]),
    .Q(Data_P[5])
  );
  DFF _202_ (
    .C(clk_8f),
    .D(_001_[6]),
    .Q(Data_P[6])
  );
  DFF _203_ (
    .C(clk_8f),
    .D(_001_[7]),
    .Q(Data_P[7])
  );
  DFF _204_ (
    .C(clk_8f),
    .D(_002_[0]),
    .Q(bit_counter[0])
  );
  DFF _205_ (
    .C(clk_8f),
    .D(_002_[1]),
    .Q(bit_counter[1])
  );
  DFF _206_ (
    .C(clk_8f),
    .D(_002_[2]),
    .Q(bit_counter[2])
  );
  DFF _207_ (
    .C(clk_8f),
    .D(_000_[0]),
    .Q(BC_counter[0])
  );
  DFF _208_ (
    .C(clk_8f),
    .D(_000_[1]),
    .Q(BC_counter[1])
  );
  DFF _209_ (
    .C(clk_8f),
    .D(_000_[2]),
    .Q(BC_counter[2])
  );
  DFF _210_ (
    .C(clk_f),
    .D(_004_),
    .Q(valid_out_e)
  );
  DFF _211_ (
    .C(clk_f),
    .D(_003_[0]),
    .Q(parallel_out_e[0])
  );
  DFF _212_ (
    .C(clk_f),
    .D(_003_[1]),
    .Q(parallel_out_e[1])
  );
  DFF _213_ (
    .C(clk_f),
    .D(_003_[2]),
    .Q(parallel_out_e[2])
  );
  DFF _214_ (
    .C(clk_f),
    .D(_003_[3]),
    .Q(parallel_out_e[3])
  );
  DFF _215_ (
    .C(clk_f),
    .D(_003_[4]),
    .Q(parallel_out_e[4])
  );
  DFF _216_ (
    .C(clk_f),
    .D(_003_[5]),
    .Q(parallel_out_e[5])
  );
  DFF _217_ (
    .C(clk_f),
    .D(_003_[6]),
    .Q(parallel_out_e[6])
  );
  DFF _218_ (
    .C(clk_f),
    .D(_003_[7]),
    .Q(parallel_out_e[7])
  );
endmodule

(* src = "demux.v:1" *)
module demux_estr(data_out_0_c, valid_out_0_c, data_out_1_c, valid_out_1_c, data_in_c, valid_in_c, reset, clk2f, clk8f);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  (* src = "demux.v:9" *)
  input clk2f;
  (* src = "demux.v:10" *)
  input clk8f;
  (* src = "demux.v:6" *)
  input [7:0] data_in_c;
  (* src = "demux.v:2" *)
  output [7:0] data_out_0_c;
  (* src = "demux.v:4" *)
  output [7:0] data_out_1_c;
  (* src = "demux.v:8" *)
  input reset;
  (* src = "demux.v:13" *)
  wire reset2;
  (* src = "demux.v:13" *)
  wire resetm;
  (* onehot = 32'd1 *)
  wire [5:0] st;
  (* src = "demux.v:7" *)
  input valid_in_c;
  (* src = "demux.v:3" *)
  output valid_out_0_c;
  (* src = "demux.v:5" *)
  output valid_out_1_c;
  NOT _37_ (
    .A(reset),
    .Y(_01_)
  );
  NAND _38_ (
    .A(st[0]),
    .B(_01_),
    .Y(_02_)
  );
  NAND _39_ (
    .A(_02_),
    .B(reset2),
    .Y(_00_)
  );
  NOT _40_ (
    .A(reset2),
    .Y(_03_)
  );
  NOR _41_ (
    .A(_03_),
    .B(valid_in_c),
    .Y(_04_)
  );
  NAND _42_ (
    .A(_04_),
    .B(st[5]),
    .Y(_05_)
  );
  NOR _43_ (
    .A(_03_),
    .B(_01_),
    .Y(_06_)
  );
  NAND _44_ (
    .A(_06_),
    .B(st[0]),
    .Y(_07_)
  );
  NAND _45_ (
    .A(_07_),
    .B(_05_),
    .Y(_31_)
  );
  NOT _46_ (
    .A(valid_in_c),
    .Y(_08_)
  );
  NOR _47_ (
    .A(st[1]),
    .B(st[3]),
    .Y(_09_)
  );
  NOR _48_ (
    .A(_09_),
    .B(_08_),
    .Y(valid_out_1_c)
  );
  NOT _49_ (
    .A(data_in_c[0]),
    .Y(_10_)
  );
  NOT _50_ (
    .A(st[3]),
    .Y(_11_)
  );
  NOT _51_ (
    .A(st[1]),
    .Y(_12_)
  );
  NAND _52_ (
    .A(_12_),
    .B(_11_),
    .Y(_13_)
  );
  NAND _53_ (
    .A(_13_),
    .B(valid_in_c),
    .Y(_14_)
  );
  NOR _54_ (
    .A(_14_),
    .B(_10_),
    .Y(data_out_1_c[0])
  );
  NOT _55_ (
    .A(data_in_c[1]),
    .Y(_15_)
  );
  NOR _56_ (
    .A(_14_),
    .B(_15_),
    .Y(data_out_1_c[1])
  );
  NOT _57_ (
    .A(data_in_c[2]),
    .Y(_16_)
  );
  NOR _58_ (
    .A(_14_),
    .B(_16_),
    .Y(data_out_1_c[2])
  );
  NOT _59_ (
    .A(data_in_c[3]),
    .Y(_17_)
  );
  NOR _60_ (
    .A(_14_),
    .B(_17_),
    .Y(data_out_1_c[3])
  );
  NOT _61_ (
    .A(data_in_c[4]),
    .Y(_20_)
  );
  NOR _62_ (
    .A(_14_),
    .B(_20_),
    .Y(data_out_1_c[4])
  );
  NOT _63_ (
    .A(data_in_c[5]),
    .Y(_21_)
  );
  NOR _64_ (
    .A(_14_),
    .B(_21_),
    .Y(data_out_1_c[5])
  );
  NOT _65_ (
    .A(data_in_c[6]),
    .Y(_24_)
  );
  NOR _66_ (
    .A(_14_),
    .B(_24_),
    .Y(data_out_1_c[6])
  );
  NOT _67_ (
    .A(data_in_c[7]),
    .Y(_25_)
  );
  NOR _68_ (
    .A(_14_),
    .B(_25_),
    .Y(data_out_1_c[7])
  );
  NOT _69_ (
    .A(st[5]),
    .Y(_26_)
  );
  NOT _70_ (
    .A(st[4]),
    .Y(_27_)
  );
  NAND _71_ (
    .A(_27_),
    .B(_26_),
    .Y(_28_)
  );
  NOR _72_ (
    .A(_28_),
    .B(st[2]),
    .Y(_29_)
  );
  NOR _73_ (
    .A(_29_),
    .B(_08_),
    .Y(valid_out_0_c)
  );
  NOR _74_ (
    .A(st[2]),
    .B(st[4]),
    .Y(_30_)
  );
  NAND _75_ (
    .A(_30_),
    .B(_26_),
    .Y(_32_)
  );
  NAND _76_ (
    .A(_32_),
    .B(valid_in_c),
    .Y(_33_)
  );
  NOR _77_ (
    .A(_33_),
    .B(_10_),
    .Y(data_out_0_c[0])
  );
  NOR _78_ (
    .A(_33_),
    .B(_15_),
    .Y(data_out_0_c[1])
  );
  NOR _79_ (
    .A(_33_),
    .B(_16_),
    .Y(data_out_0_c[2])
  );
  NOR _80_ (
    .A(_33_),
    .B(_17_),
    .Y(data_out_0_c[3])
  );
  NOR _81_ (
    .A(_33_),
    .B(_20_),
    .Y(data_out_0_c[4])
  );
  NOR _82_ (
    .A(_33_),
    .B(_21_),
    .Y(data_out_0_c[5])
  );
  NOR _83_ (
    .A(_33_),
    .B(_24_),
    .Y(data_out_0_c[6])
  );
  NOR _84_ (
    .A(_33_),
    .B(_25_),
    .Y(data_out_0_c[7])
  );
  NAND _85_ (
    .A(reset2),
    .B(_08_),
    .Y(_34_)
  );
  NOR _86_ (
    .A(st[1]),
    .B(st[4]),
    .Y(_35_)
  );
  NOR _87_ (
    .A(_35_),
    .B(_34_),
    .Y(_18_)
  );
  NOR _88_ (
    .A(st[3]),
    .B(st[2]),
    .Y(_36_)
  );
  NOR _89_ (
    .A(_36_),
    .B(_34_),
    .Y(_19_)
  );
  NOR _90_ (
    .A(_33_),
    .B(_03_),
    .Y(_22_)
  );
  NOR _91_ (
    .A(_14_),
    .B(_03_),
    .Y(_23_)
  );
  DFF _92_ (
    .C(clk2f),
    .D(_00_),
    .Q(st[0])
  );
  DFF _93_ (
    .C(clk2f),
    .D(_18_),
    .Q(st[1])
  );
  DFF _94_ (
    .C(clk2f),
    .D(_19_),
    .Q(st[2])
  );
  DFF _95_ (
    .C(clk2f),
    .D(_23_),
    .Q(st[3])
  );
  DFF _96_ (
    .C(clk2f),
    .D(_22_),
    .Q(st[4])
  );
  DFF _97_ (
    .C(clk2f),
    .D(_31_),
    .Q(st[5])
  );
  DFF _98_ (
    .C(clk8f),
    .D(resetm),
    .Q(reset2)
  );
  DFF _99_ (
    .C(clk8f),
    .D(reset),
    .Q(resetm)
  );
endmodule

(* top =  1  *)
(* src = "phy_rx_cond.v:5" *)
module phy_rx_estr(data_in_c_0, data_in_c_1, clk_f, clk_2f, clk_8f, reset, data_out_e_0, data_out_e_1, valid_out_e_0, valid_out_e_1);
  (* src = "phy_rx_cond.v:9" *)
  input clk_2f;
  (* src = "phy_rx_cond.v:10" *)
  input clk_8f;
  (* src = "phy_rx_cond.v:8" *)
  input clk_f;
  (* src = "phy_rx_cond.v:6" *)
  input data_in_c_0;
  (* src = "phy_rx_cond.v:7" *)
  input data_in_c_1;
  (* src = "phy_rx_cond.v:12" *)
  output [7:0] data_out_e_0;
  (* src = "phy_rx_cond.v:13" *)
  output [7:0] data_out_e_1;
  (* src = "phy_rx_cond.v:45" *)
  wire [7:0] data_out_e_US;
  (* src = "phy_rx_cond.v:46" *)
  wire [7:0] lane_e_0;
  (* src = "phy_rx_cond.v:47" *)
  wire [7:0] lane_e_1;
  (* src = "phy_rx_cond.v:11" *)
  input reset;
  (* src = "phy_rx_cond.v:53" *)
  wire reset2;
  (* src = "phy_rx_cond.v:52" *)
  wire resetm;
  (* src = "phy_rx_cond.v:48" *)
  wire valid_e_0_SP;
  (* src = "phy_rx_cond.v:49" *)
  wire valid_e_1_SP;
  (* src = "phy_rx_cond.v:14" *)
  output valid_out_e_0;
  (* src = "phy_rx_cond.v:15" *)
  output valid_out_e_1;
  (* src = "phy_rx_cond.v:50" *)
  wire valid_out_e_US;
  DFF _0_ (
    .C(clk_2f),
    .D(resetm),
    .Q(reset2)
  );
  DFF _1_ (
    .C(clk_2f),
    .D(reset),
    .Q(resetm)
  );
  (* src = "phy_rx_cond.v:102" *)
  Byte_un_striping_estr Byte_un_striping_instance0 (
    .clk_2f(clk_2f),
    .clk_f(clk_f),
    .data_out_e(data_out_e_US),
    .lane_0(lane_e_0),
    .lane_1(lane_e_1),
    .reset(reset),
    .valid_0(valid_e_0_SP),
    .valid_1(valid_e_1_SP),
    .valid_out_e(valid_out_e_US)
  );
  (* src = "phy_rx_cond.v:79" *)
  Serie_Paralelo_estr Serie_Paralelo_instance0 (
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data_in(data_in_c_0),
    .parallel_out_e(lane_e_0),
    .reset(reset),
    .valid_out_e(valid_e_0_SP)
  );
  (* src = "phy_rx_cond.v:89" *)
  Serie_Paralelo_estr Serie_Paralelo_instance1 (
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data_in(data_in_c_1),
    .parallel_out_e(lane_e_1),
    .reset(reset2),
    .valid_out_e(valid_e_1_SP)
  );
  (* src = "phy_rx_cond.v:117" *)
  demux_estr demux_cond_instance0 (
    .clk2f(clk_2f),
    .clk8f(clk_8f),
    .data_in_c(data_out_e_US),
    .data_out_0_c(data_out_e_0),
    .data_out_1_c(data_out_e_1),
    .reset(reset),
    .valid_in_c(valid_out_e_US),
    .valid_out_0_c(valid_out_e_0),
    .valid_out_1_c(valid_out_e_1)
  );
endmodule
