`include "cmos_cells.v"
/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

(* src = "clkgen.v:1" *)
module clkgen_s(clkf_s, clk2f_s, clk4f_s, clk8f, reset);
  (* src = "clkgen.v:8" *)
  wire _00_;
  (* src = "clkgen.v:8" *)
  wire _01_;
  (* src = "clkgen.v:8" *)
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  (* src = "clkgen.v:3" *)
  output clk2f_s;
  (* src = "clkgen.v:4" *)
  output clk4f_s;
  (* src = "clkgen.v:5" *)
  input clk8f;
  (* src = "clkgen.v:2" *)
  output clkf_s;
  (* src = "clkgen.v:6" *)
  input reset;
  NOT _14_ (
    .A(reset),
    .Y(_13_)
  );
  NOR _15_ (
    .A(clk4f_s),
    .B(_13_),
    .Y(_01_)
  );
  NOR _16_ (
    .A(clk2f_s),
    .B(clk4f_s),
    .Y(_03_)
  );
  NOT _17_ (
    .A(clk4f_s),
    .Y(_04_)
  );
  NOT _18_ (
    .A(clk2f_s),
    .Y(_05_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_04_),
    .Y(_06_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_03_),
    .Y(_07_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_13_),
    .Y(_00_)
  );
  NOT _22_ (
    .A(clkf_s),
    .Y(_08_)
  );
  NOR _23_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _24_ (
    .A(_05_),
    .B(_04_),
    .Y(_10_)
  );
  NOR _25_ (
    .A(_10_),
    .B(clkf_s),
    .Y(_11_)
  );
  NOR _26_ (
    .A(_11_),
    .B(_09_),
    .Y(_12_)
  );
  NOR _27_ (
    .A(_12_),
    .B(_13_),
    .Y(_02_)
  );
  DFF _28_ (
    .C(clk8f),
    .D(_02_),
    .Q(clkf_s)
  );
  DFF _29_ (
    .C(clk8f),
    .D(_00_),
    .Q(clk2f_s)
  );
  DFF _30_ (
    .C(clk8f),
    .D(_01_),
    .Q(clk4f_s)
  );
endmodule

(* src = "mux.v:1" *)
module mux_s(data_out_s, valid_out_s, data_in_0_c, valid_in_0_c, data_in_1_c, valid_in_1_c, reset, clk2f, clk8f);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  (* src = "mux.v:9" *)
  input clk2f;
  (* src = "mux.v:10" *)
  input clk8f;
  (* src = "mux.v:4" *)
  input [7:0] data_in_0_c;
  (* src = "mux.v:6" *)
  input [7:0] data_in_1_c;
  (* src = "mux.v:2" *)
  output [7:0] data_out_s;
  (* src = "mux.v:8" *)
  input reset;
  (* src = "mux.v:13" *)
  wire reset2;
  (* src = "mux.v:13" *)
  wire resetm;
  (* onehot = 32'd1 *)
  wire [5:0] st;
  (* src = "mux.v:5" *)
  input valid_in_0_c;
  (* src = "mux.v:7" *)
  input valid_in_1_c;
  (* src = "mux.v:3" *)
  output valid_out_s;
  NOR _079_ (
    .A(valid_in_1_c),
    .B(valid_in_0_c),
    .Y(_027_)
  );
  NAND _080_ (
    .A(_027_),
    .B(reset2),
    .Y(_028_)
  );
  NOT _081_ (
    .A(st[1]),
    .Y(_029_)
  );
  NOT _082_ (
    .A(st[4]),
    .Y(_030_)
  );
  NAND _083_ (
    .A(_030_),
    .B(_029_),
    .Y(_031_)
  );
  NOT _084_ (
    .A(_031_),
    .Y(_032_)
  );
  NOR _085_ (
    .A(_032_),
    .B(_028_),
    .Y(_022_)
  );
  NOR _086_ (
    .A(st[2]),
    .B(st[5]),
    .Y(_033_)
  );
  NAND _087_ (
    .A(_033_),
    .B(_029_),
    .Y(_034_)
  );
  NOT _088_ (
    .A(reset2),
    .Y(_035_)
  );
  NOT _089_ (
    .A(valid_in_0_c),
    .Y(_036_)
  );
  NAND _090_ (
    .A(valid_in_1_c),
    .B(_036_),
    .Y(_037_)
  );
  NOR _091_ (
    .A(_037_),
    .B(_035_),
    .Y(_038_)
  );
  NAND _092_ (
    .A(_038_),
    .B(_034_),
    .Y(_039_)
  );
  NOT _093_ (
    .A(st[3]),
    .Y(_040_)
  );
  NOT _094_ (
    .A(valid_in_1_c),
    .Y(_041_)
  );
  NAND _095_ (
    .A(_041_),
    .B(_036_),
    .Y(_042_)
  );
  NAND _096_ (
    .A(_042_),
    .B(reset2),
    .Y(_043_)
  );
  NOR _097_ (
    .A(_043_),
    .B(_040_),
    .Y(_044_)
  );
  NOR _098_ (
    .A(_035_),
    .B(_036_),
    .Y(_045_)
  );
  NAND _099_ (
    .A(_045_),
    .B(valid_in_1_c),
    .Y(_046_)
  );
  NOR _100_ (
    .A(_046_),
    .B(_029_),
    .Y(_047_)
  );
  NOR _101_ (
    .A(_047_),
    .B(_044_),
    .Y(_048_)
  );
  NAND _102_ (
    .A(_048_),
    .B(_039_),
    .Y(_021_)
  );
  NOT _103_ (
    .A(reset),
    .Y(_049_)
  );
  NAND _104_ (
    .A(st[0]),
    .B(_049_),
    .Y(_050_)
  );
  NAND _105_ (
    .A(_050_),
    .B(reset2),
    .Y(_023_)
  );
  NOT _106_ (
    .A(st[0]),
    .Y(_051_)
  );
  NOR _107_ (
    .A(_051_),
    .B(_049_),
    .Y(_052_)
  );
  NOT _108_ (
    .A(st[5]),
    .Y(_053_)
  );
  NOR _109_ (
    .A(_042_),
    .B(_053_),
    .Y(_054_)
  );
  NOR _110_ (
    .A(_054_),
    .B(_052_),
    .Y(_055_)
  );
  NOR _111_ (
    .A(_055_),
    .B(_035_),
    .Y(_024_)
  );
  NOR _112_ (
    .A(_027_),
    .B(_035_),
    .Y(_056_)
  );
  NAND _113_ (
    .A(_056_),
    .B(st[4]),
    .Y(_057_)
  );
  NOR _114_ (
    .A(_046_),
    .B(_033_),
    .Y(_058_)
  );
  NOT _115_ (
    .A(st[2]),
    .Y(_059_)
  );
  NAND _116_ (
    .A(_059_),
    .B(_053_),
    .Y(_060_)
  );
  NOR _117_ (
    .A(_060_),
    .B(st[1]),
    .Y(_061_)
  );
  NOR _118_ (
    .A(valid_in_1_c),
    .B(_036_),
    .Y(_062_)
  );
  NAND _119_ (
    .A(_062_),
    .B(reset2),
    .Y(_063_)
  );
  NOR _120_ (
    .A(_063_),
    .B(_061_),
    .Y(_064_)
  );
  NOR _121_ (
    .A(_064_),
    .B(_058_),
    .Y(_065_)
  );
  NAND _122_ (
    .A(_065_),
    .B(_057_),
    .Y(_026_)
  );
  NOR _123_ (
    .A(_036_),
    .B(_030_),
    .Y(_066_)
  );
  NAND _124_ (
    .A(valid_in_1_c),
    .B(st[3]),
    .Y(_067_)
  );
  NAND _125_ (
    .A(_067_),
    .B(_061_),
    .Y(_068_)
  );
  NOR _126_ (
    .A(_068_),
    .B(_066_),
    .Y(_069_)
  );
  NOR _127_ (
    .A(st[3]),
    .B(st[2]),
    .Y(_070_)
  );
  NOR _128_ (
    .A(_031_),
    .B(st[5]),
    .Y(_071_)
  );
  NAND _129_ (
    .A(_071_),
    .B(_070_),
    .Y(_072_)
  );
  NAND _130_ (
    .A(_072_),
    .B(_042_),
    .Y(_073_)
  );
  NOR _131_ (
    .A(_073_),
    .B(_069_),
    .Y(valid_out_s)
  );
  NOR _132_ (
    .A(_041_),
    .B(_029_),
    .Y(_074_)
  );
  NOR _133_ (
    .A(_041_),
    .B(_040_),
    .Y(_075_)
  );
  NOR _134_ (
    .A(_075_),
    .B(_074_),
    .Y(_076_)
  );
  NOR _135_ (
    .A(_041_),
    .B(valid_in_0_c),
    .Y(_077_)
  );
  NAND _136_ (
    .A(_077_),
    .B(_060_),
    .Y(_078_)
  );
  NAND _137_ (
    .A(_078_),
    .B(_076_),
    .Y(_000_)
  );
  NAND _138_ (
    .A(_000_),
    .B(data_in_1_c[0]),
    .Y(_001_)
  );
  NAND _139_ (
    .A(_062_),
    .B(st[1]),
    .Y(_002_)
  );
  NOR _140_ (
    .A(_033_),
    .B(_036_),
    .Y(_003_)
  );
  NOR _141_ (
    .A(_003_),
    .B(_066_),
    .Y(_004_)
  );
  NAND _142_ (
    .A(_004_),
    .B(_002_),
    .Y(_005_)
  );
  NAND _143_ (
    .A(_005_),
    .B(data_in_0_c[0]),
    .Y(_006_)
  );
  NAND _144_ (
    .A(_006_),
    .B(_001_),
    .Y(data_out_s[0])
  );
  NAND _145_ (
    .A(_005_),
    .B(data_in_0_c[1]),
    .Y(_007_)
  );
  NAND _146_ (
    .A(_000_),
    .B(data_in_1_c[1]),
    .Y(_008_)
  );
  NAND _147_ (
    .A(_008_),
    .B(_007_),
    .Y(data_out_s[1])
  );
  NAND _148_ (
    .A(_005_),
    .B(data_in_0_c[2]),
    .Y(_009_)
  );
  NAND _149_ (
    .A(_000_),
    .B(data_in_1_c[2]),
    .Y(_010_)
  );
  NAND _150_ (
    .A(_010_),
    .B(_009_),
    .Y(data_out_s[2])
  );
  NAND _151_ (
    .A(_005_),
    .B(data_in_0_c[3]),
    .Y(_011_)
  );
  NAND _152_ (
    .A(_000_),
    .B(data_in_1_c[3]),
    .Y(_012_)
  );
  NAND _153_ (
    .A(_012_),
    .B(_011_),
    .Y(data_out_s[3])
  );
  NAND _154_ (
    .A(_005_),
    .B(data_in_0_c[4]),
    .Y(_013_)
  );
  NAND _155_ (
    .A(_000_),
    .B(data_in_1_c[4]),
    .Y(_014_)
  );
  NAND _156_ (
    .A(_014_),
    .B(_013_),
    .Y(data_out_s[4])
  );
  NAND _157_ (
    .A(_005_),
    .B(data_in_0_c[5]),
    .Y(_015_)
  );
  NAND _158_ (
    .A(_000_),
    .B(data_in_1_c[5]),
    .Y(_016_)
  );
  NAND _159_ (
    .A(_016_),
    .B(_015_),
    .Y(data_out_s[5])
  );
  NAND _160_ (
    .A(_005_),
    .B(data_in_0_c[6]),
    .Y(_017_)
  );
  NAND _161_ (
    .A(_000_),
    .B(data_in_1_c[6]),
    .Y(_018_)
  );
  NAND _162_ (
    .A(_018_),
    .B(_017_),
    .Y(data_out_s[6])
  );
  NAND _163_ (
    .A(_005_),
    .B(data_in_0_c[7]),
    .Y(_019_)
  );
  NAND _164_ (
    .A(_000_),
    .B(data_in_1_c[7]),
    .Y(_020_)
  );
  NAND _165_ (
    .A(_020_),
    .B(_019_),
    .Y(data_out_s[7])
  );
  NOR _166_ (
    .A(_070_),
    .B(_028_),
    .Y(_025_)
  );
  DFF _167_ (
    .C(clk2f),
    .D(_023_),
    .Q(st[0])
  );
  DFF _168_ (
    .C(clk2f),
    .D(_022_),
    .Q(st[1])
  );
  DFF _169_ (
    .C(clk2f),
    .D(_025_),
    .Q(st[2])
  );
  DFF _170_ (
    .C(clk2f),
    .D(_021_),
    .Q(st[3])
  );
  DFF _171_ (
    .C(clk2f),
    .D(_026_),
    .Q(st[4])
  );
  DFF _172_ (
    .C(clk2f),
    .D(_024_),
    .Q(st[5])
  );
  DFF _173_ (
    .C(clk8f),
    .D(resetm),
    .Q(reset2)
  );
  DFF _174_ (
    .C(clk8f),
    .D(reset),
    .Q(resetm)
  );
endmodule

(* top =  1  *)
(* src = "proy1_conductual.v:4" *)
module proy1_synth(data_out_s, valid_out_s, data_in_0, data_in_1, valid_in_0, valid_in_1, reset, clk8f, clkf_s, clk2f_s, clk4f_s);
  (* src = "proy1_conductual.v:14" *)
  output clk2f_s;
  (* src = "proy1_conductual.v:17" *)
  wire clk2f_mid;
  (* src = "proy1_conductual.v:15" *)
  output clk4f_s;
  (* src = "proy1_conductual.v:12" *)
  input clk8f;
  (* src = "proy1_conductual.v:13" *)
  output clkf_s;
  (* src = "proy1_conductual.v:7" *)
  input [7:0] data_in_0;
  (* src = "proy1_conductual.v:8" *)
  input [7:0] data_in_1;
  (* src = "proy1_conductual.v:5" *)
  output [7:0] data_out_s;
  (* src = "proy1_conductual.v:11" *)
  input reset;
  (* src = "proy1_conductual.v:9" *)
  output valid_in_0;
  (* src = "proy1_conductual.v:10" *)
  output valid_in_1;
  (* src = "proy1_conductual.v:6" *)
  output valid_out_s;
  (* src = "proy1_conductual.v:19" *)
  clkgen_s generador_de_relojes (
    .clk2f_s(clk2f_mid),
    .clk4f_s(clk4f_s),
    .clk8f(clk8f),
    .clkf_s(clkf_s),
    .reset(reset)
  );
  (* src = "proy1_conductual.v:21" *)
  mux_s mux_ (
    .clk2f(clk2f_mid),
    .clk8f(clk8f),
    .data_in_0_c(data_in_0),
    .data_in_1_c(data_in_1),
    .data_out_s(data_out_s),
    .reset(reset),
    .valid_in_0_c(valid_in_0),
    .valid_in_1_c(valid_in_1),
    .valid_out_s(valid_out_s)
  );
endmodule
