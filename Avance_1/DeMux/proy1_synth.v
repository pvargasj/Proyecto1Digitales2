`include "cmos_cells.v"
/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

(* src = "clkgen.v:1" *)
module clkgen_s(clkf_s, clk2f_s, clk4f_s, clk8f, reset);
  (* src = "clkgen.v:8" *)
  wire _00_;
  (* src = "clkgen.v:8" *)
  wire _01_;
  (* src = "clkgen.v:8" *)
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  (* src = "clkgen.v:15" *)
  wire [31:0] _21_;
  (* src = "<techmap.v>:260|<techmap.v>:203" *)
  wire [31:0] _22_;
  wire [31:0] _23_;
  (* src = "<techmap.v>:260|<techmap.v>:221" *)
  wire _24_;
  (* src = "clkgen.v:3" *)
  output clk2f_s;
  (* src = "clkgen.v:4" *)
  output clk4f_s;
  (* src = "clkgen.v:5" *)
  input clk8f;
  (* src = "clkgen.v:2" *)
  output clkf_s;
  (* src = "clkgen.v:6" *)
  input reset;
  NOT _25_ (
    .A(_14_),
    .Y(_20_)
  );
  NOR _26_ (
    .A(_19_),
    .B(_20_),
    .Y(_16_)
  );
  NOR _27_ (
    .A(_06_),
    .B(_19_),
    .Y(_03_)
  );
  NOT _28_ (
    .A(_19_),
    .Y(_04_)
  );
  NOT _29_ (
    .A(_06_),
    .Y(_05_)
  );
  NOR _30_ (
    .A(_05_),
    .B(_04_),
    .Y(_07_)
  );
  NOR _31_ (
    .A(_07_),
    .B(_03_),
    .Y(_09_)
  );
  NOR _32_ (
    .A(_09_),
    .B(_20_),
    .Y(_17_)
  );
  NOT _33_ (
    .A(_08_),
    .Y(_10_)
  );
  NOR _34_ (
    .A(_03_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _35_ (
    .A(_05_),
    .B(_04_),
    .Y(_12_)
  );
  NOR _36_ (
    .A(_12_),
    .B(_08_),
    .Y(_13_)
  );
  NOR _37_ (
    .A(_13_),
    .B(_11_),
    .Y(_15_)
  );
  NOR _38_ (
    .A(_15_),
    .B(_20_),
    .Y(_18_)
  );
  DFF _39_ (
    .C(clk8f),
    .D(_02_),
    .Q(clkf_s)
  );
  DFF _40_ (
    .C(clk8f),
    .D(_00_),
    .Q(clk2f_s)
  );
  DFF _41_ (
    .C(clk8f),
    .D(_01_),
    .Q(clk4f_s)
  );
  assign _14_ = reset;
  assign _01_ = _16_;
  assign _00_ = _17_;
  assign _02_ = _18_;
  assign _19_ = clk4f_s;
  assign _06_ = clk2f_s;
  assign _08_ = clkf_s;
endmodule

(* src = "demux.v:1" *)
module demux_s(data_out_0_s, valid_out_0_s, data_out_1_s, valid_out_1_s, data_in_c, valid_in_c, reset, clk2f, clk8f);
  (* src = "demux.v:37" *)
  wire [7:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire [5:0] _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire [1:0] _091_;
  wire [1:0] _092_;
  wire [1:0] _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  (* src = "demux.v:9" *)
  input clk2f;
  (* src = "demux.v:10" *)
  input clk8f;
  (* src = "demux.v:6" *)
  input [7:0] data_in_c;
  (* src = "demux.v:2" *)
  output [7:0] data_out_0_s;
  (* src = "demux.v:4" *)
  output [7:0] data_out_1_s;
  (* src = "demux.v:8" *)
  input reset;
  (* src = "demux.v:13" *)
  wire reset2;
  (* src = "demux.v:13" *)
  wire resetm;
  (* onehot = 32'd1 *)
  wire [5:0] st;
  (* src = "demux.v:7" *)
  input valid_in_c;
  (* src = "demux.v:3" *)
  output valid_out_0_s;
  (* src = "demux.v:5" *)
  output valid_out_1_s;
  NOT _098_ (
    .A(_046_),
    .Y(_015_)
  );
  NAND _099_ (
    .A(_059_),
    .B(_015_),
    .Y(_017_)
  );
  NAND _100_ (
    .A(_017_),
    .B(_053_),
    .Y(_027_)
  );
  NOT _101_ (
    .A(_053_),
    .Y(_018_)
  );
  NOT _102_ (
    .A(_059_),
    .Y(_020_)
  );
  NOR _103_ (
    .A(_020_),
    .B(_015_),
    .Y(_022_)
  );
  NOT _104_ (
    .A(_005_),
    .Y(_024_)
  );
  NOR _105_ (
    .A(_024_),
    .B(_004_),
    .Y(_026_)
  );
  NOR _106_ (
    .A(_026_),
    .B(_022_),
    .Y(_029_)
  );
  NOR _107_ (
    .A(_029_),
    .B(_018_),
    .Y(_003_)
  );
  NOT _108_ (
    .A(_004_),
    .Y(_032_)
  );
  NOR _109_ (
    .A(_007_),
    .B(_001_),
    .Y(_034_)
  );
  NOR _110_ (
    .A(_034_),
    .B(_032_),
    .Y(_019_)
  );
  NOT _111_ (
    .A(_008_),
    .Y(_037_)
  );
  NOT _112_ (
    .A(_001_),
    .Y(_039_)
  );
  NOT _113_ (
    .A(_007_),
    .Y(_041_)
  );
  NAND _114_ (
    .A(_041_),
    .B(_039_),
    .Y(_043_)
  );
  NAND _115_ (
    .A(_043_),
    .B(_004_),
    .Y(_045_)
  );
  NOR _116_ (
    .A(_045_),
    .B(_037_),
    .Y(_021_)
  );
  NOT _117_ (
    .A(_009_),
    .Y(_049_)
  );
  NOR _118_ (
    .A(_045_),
    .B(_049_),
    .Y(_023_)
  );
  NOT _119_ (
    .A(_010_),
    .Y(_052_)
  );
  NOR _120_ (
    .A(_045_),
    .B(_052_),
    .Y(_025_)
  );
  NOT _121_ (
    .A(_011_),
    .Y(_055_)
  );
  NOR _122_ (
    .A(_045_),
    .B(_055_),
    .Y(_028_)
  );
  NOT _123_ (
    .A(_012_),
    .Y(_058_)
  );
  NOR _124_ (
    .A(_045_),
    .B(_058_),
    .Y(_030_)
  );
  NOT _125_ (
    .A(_013_),
    .Y(_060_)
  );
  NOR _126_ (
    .A(_045_),
    .B(_060_),
    .Y(_031_)
  );
  NOT _127_ (
    .A(_014_),
    .Y(_062_)
  );
  NOR _128_ (
    .A(_045_),
    .B(_062_),
    .Y(_033_)
  );
  NOT _129_ (
    .A(_016_),
    .Y(_063_)
  );
  NOR _130_ (
    .A(_045_),
    .B(_063_),
    .Y(_035_)
  );
  NOT _131_ (
    .A(_002_),
    .Y(_064_)
  );
  NAND _132_ (
    .A(_024_),
    .B(_064_),
    .Y(_065_)
  );
  NOR _133_ (
    .A(_065_),
    .B(_006_),
    .Y(_066_)
  );
  NOR _134_ (
    .A(_066_),
    .B(_032_),
    .Y(_036_)
  );
  NOR _135_ (
    .A(_006_),
    .B(_005_),
    .Y(_067_)
  );
  NAND _136_ (
    .A(_067_),
    .B(_064_),
    .Y(_068_)
  );
  NAND _137_ (
    .A(_068_),
    .B(_004_),
    .Y(_069_)
  );
  NOR _138_ (
    .A(_069_),
    .B(_037_),
    .Y(_038_)
  );
  NOR _139_ (
    .A(_069_),
    .B(_049_),
    .Y(_040_)
  );
  NOR _140_ (
    .A(_069_),
    .B(_052_),
    .Y(_042_)
  );
  NOR _141_ (
    .A(_069_),
    .B(_055_),
    .Y(_044_)
  );
  NOR _142_ (
    .A(_069_),
    .B(_058_),
    .Y(_047_)
  );
  NOR _143_ (
    .A(_069_),
    .B(_060_),
    .Y(_048_)
  );
  NOR _144_ (
    .A(_069_),
    .B(_062_),
    .Y(_050_)
  );
  NOR _145_ (
    .A(_069_),
    .B(_063_),
    .Y(_051_)
  );
  NOR _146_ (
    .A(_045_),
    .B(_018_),
    .Y(_054_)
  );
  NAND _147_ (
    .A(_053_),
    .B(_032_),
    .Y(_070_)
  );
  NOR _148_ (
    .A(_007_),
    .B(_006_),
    .Y(_071_)
  );
  NOR _149_ (
    .A(_071_),
    .B(_070_),
    .Y(_056_)
  );
  NOR _150_ (
    .A(_002_),
    .B(_001_),
    .Y(_072_)
  );
  NOR _151_ (
    .A(_072_),
    .B(_070_),
    .Y(_057_)
  );
  NOR _152_ (
    .A(_069_),
    .B(_018_),
    .Y(_061_)
  );
  DFF _153_ (
    .C(clk8f),
    .D(resetm),
    .Q(reset2)
  );
  DFF _154_ (
    .C(clk8f),
    .D(reset),
    .Q(resetm)
  );
  DFF _155_ (
    .C(clk2f),
    .D(_084_[0]),
    .Q(st[0])
  );
  DFF _156_ (
    .C(clk2f),
    .D(_077_),
    .Q(st[1])
  );
  DFF _157_ (
    .C(clk2f),
    .D(_078_),
    .Q(st[2])
  );
  DFF _158_ (
    .C(clk2f),
    .D(_079_),
    .Q(st[3])
  );
  DFF _159_ (
    .C(clk2f),
    .D(_080_),
    .Q(st[4])
  );
  DFF _160_ (
    .C(clk2f),
    .D(_084_[5]),
    .Q(st[5])
  );
  assign _001_ = st[3];
  assign _002_ = st[2];
  assign _084_[0] = _027_;
  assign _046_ = reset;
  assign _084_[5] = _003_;
  assign _004_ = valid_in_c;
  assign _005_ = st[5];
  assign _006_ = st[4];
  assign _007_ = st[1];
  assign _008_ = data_in_c[0];
  assign _009_ = data_in_c[1];
  assign _010_ = data_in_c[2];
  assign _011_ = data_in_c[3];
  assign _012_ = data_in_c[4];
  assign _013_ = data_in_c[5];
  assign _014_ = data_in_c[6];
  assign _016_ = data_in_c[7];
  assign valid_out_1_s = _019_;
  assign data_out_1_s[0] = _021_;
  assign data_out_1_s[1] = _023_;
  assign data_out_1_s[2] = _025_;
  assign data_out_1_s[3] = _028_;
  assign data_out_1_s[4] = _030_;
  assign data_out_1_s[5] = _031_;
  assign data_out_1_s[6] = _033_;
  assign data_out_1_s[7] = _035_;
  assign valid_out_0_s = _036_;
  assign data_out_0_s[0] = _038_;
  assign data_out_0_s[1] = _040_;
  assign data_out_0_s[2] = _042_;
  assign data_out_0_s[3] = _044_;
  assign data_out_0_s[4] = _047_;
  assign data_out_0_s[5] = _048_;
  assign data_out_0_s[6] = _050_;
  assign data_out_0_s[7] = _051_;
  assign _053_ = reset2;
  assign _079_ = _054_;
  assign _077_ = _056_;
  assign _078_ = _057_;
  assign _059_ = st[0];
  assign _080_ = _061_;
endmodule

(* src = "mux.v:1" *)
module mux_s(data_out_c, valid_out_c, data_in_0_c, valid_in_0_c, data_in_1_c, valid_in_1_c, reset, clk2f, clk8f);
  (* src = "mux.v:38" *)
  wire [7:0] _000_;
  (* src = "mux.v:38" *)
  wire [7:0] _001_;
  (* src = "mux.v:38" *)
  wire _002_;
  (* src = "mux.v:38" *)
  wire [7:0] _003_;
  (* src = "mux.v:38" *)
  wire _004_;
  (* src = "mux.v:38" *)
  wire [7:0] _005_;
  (* src = "mux.v:38" *)
  wire _006_;
  (* src = "mux.v:38" *)
  wire [7:0] _007_;
  (* src = "mux.v:38" *)
  wire [7:0] _008_;
  (* src = "mux.v:38" *)
  wire [7:0] _009_;
  (* src = "mux.v:38" *)
  wire [7:0] _010_;
  (* src = "mux.v:38" *)
  wire _011_;
  (* src = "mux.v:38" *)
  wire [7:0] _012_;
  (* src = "mux.v:38" *)
  wire _013_;
  (* src = "mux.v:38" *)
  wire [7:0] _014_;
  (* src = "mux.v:38" *)
  wire [7:0] _015_;
  (* src = "mux.v:38" *)
  wire _016_;
  (* src = "mux.v:38" *)
  wire [7:0] _017_;
  (* src = "mux.v:38" *)
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire [5:0] _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire [1:0] _158_;
  wire _159_;
  wire [1:0] _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire [1:0] _164_;
  wire [1:0] _165_;
  wire [1:0] _166_;
  wire [1:0] _167_;
  wire [1:0] _168_;
  wire [1:0] _169_;
  wire [1:0] _170_;
  wire [1:0] _171_;
  wire [1:0] _172_;
  wire [1:0] _173_;
  wire [3:0] _174_;
  wire [1:0] _175_;
  wire [1:0] _176_;
  wire [3:0] _177_;
  wire [1:0] _178_;
  wire [2:0] _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  (* src = "mux.v:105" *)
  wire _188_;
  (* src = "mux.v:110" *)
  wire _189_;
  (* src = "mux.v:43|<techmap.v>:432" *)
  wire [2:0] _190_;
  (* src = "mux.v:43|<techmap.v>:428" *)
  wire _191_;
  (* src = "mux.v:43|<techmap.v>:432" *)
  wire [31:0] _192_;
  (* src = "mux.v:43|<techmap.v>:428" *)
  wire [7:0] _193_;
  (* src = "mux.v:43|<techmap.v>:445" *)
  wire _194_;
  (* src = "mux.v:43|<techmap.v>:445" *)
  wire _195_;
  (* src = "mux.v:9" *)
  input clk2f;
  (* src = "mux.v:10" *)
  input clk8f;
  (* src = "mux.v:4" *)
  input [7:0] data_in_0_c;
  (* src = "mux.v:6" *)
  input [7:0] data_in_1_c;
  (* src = "mux.v:2" *)
  output [7:0] data_out_c;
  (* src = "mux.v:8" *)
  input reset;
  (* src = "mux.v:13" *)
  wire reset2;
  (* src = "mux.v:13" *)
  wire resetm;
  (* onehot = 32'd1 *)
  wire [5:0] st;
  (* src = "mux.v:5" *)
  input valid_in_0_c;
  (* src = "mux.v:7" *)
  input valid_in_1_c;
  (* src = "mux.v:3" *)
  output valid_out_c;
  NOT _196_ (
    .A(_096_),
    .Y(_076_)
  );
  NAND _197_ (
    .A(_074_),
    .B(_076_),
    .Y(_078_)
  );
  NAND _198_ (
    .A(_078_),
    .B(_072_),
    .Y(_084_)
  );
  NOT _199_ (
    .A(_072_),
    .Y(_079_)
  );
  NOT _200_ (
    .A(_074_),
    .Y(_080_)
  );
  NOR _201_ (
    .A(_080_),
    .B(_076_),
    .Y(_081_)
  );
  NOT _202_ (
    .A(_061_),
    .Y(_082_)
  );
  NOT _203_ (
    .A(_038_),
    .Y(_083_)
  );
  NOT _204_ (
    .A(_040_),
    .Y(_086_)
  );
  NAND _205_ (
    .A(_086_),
    .B(_083_),
    .Y(_087_)
  );
  NOR _206_ (
    .A(_087_),
    .B(_082_),
    .Y(_089_)
  );
  NOR _207_ (
    .A(_089_),
    .B(_081_),
    .Y(_090_)
  );
  NOR _208_ (
    .A(_090_),
    .B(_079_),
    .Y(_019_)
  );
  NOT _209_ (
    .A(_029_),
    .Y(_091_)
  );
  NOR _210_ (
    .A(_062_),
    .B(_061_),
    .Y(_092_)
  );
  NAND _211_ (
    .A(_092_),
    .B(_091_),
    .Y(_093_)
  );
  NAND _212_ (
    .A(_086_),
    .B(_038_),
    .Y(_094_)
  );
  NOR _213_ (
    .A(_094_),
    .B(_079_),
    .Y(_095_)
  );
  NAND _214_ (
    .A(_095_),
    .B(_093_),
    .Y(_097_)
  );
  NOT _215_ (
    .A(_088_),
    .Y(_098_)
  );
  NAND _216_ (
    .A(_087_),
    .B(_072_),
    .Y(_099_)
  );
  NOR _217_ (
    .A(_099_),
    .B(_098_),
    .Y(_100_)
  );
  NOR _218_ (
    .A(_086_),
    .B(_083_),
    .Y(_101_)
  );
  NAND _219_ (
    .A(_101_),
    .B(_072_),
    .Y(_102_)
  );
  NOR _220_ (
    .A(_102_),
    .B(_092_),
    .Y(_103_)
  );
  NOR _221_ (
    .A(_103_),
    .B(_100_),
    .Y(_104_)
  );
  NAND _222_ (
    .A(_104_),
    .B(_097_),
    .Y(_060_)
  );
  NAND _223_ (
    .A(_040_),
    .B(_083_),
    .Y(_105_)
  );
  NOR _224_ (
    .A(_105_),
    .B(_079_),
    .Y(_106_)
  );
  NAND _225_ (
    .A(_106_),
    .B(_093_),
    .Y(_107_)
  );
  NOR _226_ (
    .A(_102_),
    .B(_091_),
    .Y(_108_)
  );
  NOT _227_ (
    .A(_085_),
    .Y(_109_)
  );
  NOR _228_ (
    .A(_099_),
    .B(_109_),
    .Y(_110_)
  );
  NOR _229_ (
    .A(_110_),
    .B(_108_),
    .Y(_111_)
  );
  NAND _230_ (
    .A(_111_),
    .B(_107_),
    .Y(_075_)
  );
  NOT _231_ (
    .A(_087_),
    .Y(_112_)
  );
  NAND _232_ (
    .A(_112_),
    .B(_072_),
    .Y(_113_)
  );
  NAND _233_ (
    .A(_091_),
    .B(_098_),
    .Y(_114_)
  );
  NOT _234_ (
    .A(_114_),
    .Y(_115_)
  );
  NOR _235_ (
    .A(_115_),
    .B(_113_),
    .Y(_077_)
  );
  NAND _236_ (
    .A(_038_),
    .B(_088_),
    .Y(_116_)
  );
  NAND _237_ (
    .A(_040_),
    .B(_085_),
    .Y(_117_)
  );
  NAND _238_ (
    .A(_117_),
    .B(_116_),
    .Y(_118_)
  );
  NOR _239_ (
    .A(_118_),
    .B(_093_),
    .Y(_119_)
  );
  NOR _240_ (
    .A(_085_),
    .B(_062_),
    .Y(_120_)
  );
  NOR _241_ (
    .A(_114_),
    .B(_061_),
    .Y(_121_)
  );
  NAND _242_ (
    .A(_121_),
    .B(_120_),
    .Y(_122_)
  );
  NAND _243_ (
    .A(_122_),
    .B(_087_),
    .Y(_123_)
  );
  NOR _244_ (
    .A(_123_),
    .B(_119_),
    .Y(_063_)
  );
  NOR _245_ (
    .A(_086_),
    .B(_109_),
    .Y(_124_)
  );
  NOR _246_ (
    .A(_086_),
    .B(_091_),
    .Y(_125_)
  );
  NOR _247_ (
    .A(_125_),
    .B(_124_),
    .Y(_126_)
  );
  NOT _248_ (
    .A(_062_),
    .Y(_127_)
  );
  NAND _249_ (
    .A(_127_),
    .B(_082_),
    .Y(_128_)
  );
  NOR _250_ (
    .A(_086_),
    .B(_038_),
    .Y(_129_)
  );
  NAND _251_ (
    .A(_129_),
    .B(_128_),
    .Y(_130_)
  );
  NAND _252_ (
    .A(_130_),
    .B(_126_),
    .Y(_131_)
  );
  NAND _253_ (
    .A(_131_),
    .B(_052_),
    .Y(_132_)
  );
  NOR _254_ (
    .A(_040_),
    .B(_083_),
    .Y(_020_)
  );
  NAND _255_ (
    .A(_020_),
    .B(_029_),
    .Y(_021_)
  );
  NOR _256_ (
    .A(_083_),
    .B(_098_),
    .Y(_022_)
  );
  NOR _257_ (
    .A(_092_),
    .B(_083_),
    .Y(_023_)
  );
  NOR _258_ (
    .A(_023_),
    .B(_022_),
    .Y(_024_)
  );
  NAND _259_ (
    .A(_024_),
    .B(_021_),
    .Y(_025_)
  );
  NAND _260_ (
    .A(_025_),
    .B(_042_),
    .Y(_026_)
  );
  NAND _261_ (
    .A(_026_),
    .B(_132_),
    .Y(_064_)
  );
  NAND _262_ (
    .A(_025_),
    .B(_045_),
    .Y(_027_)
  );
  NAND _263_ (
    .A(_131_),
    .B(_053_),
    .Y(_028_)
  );
  NAND _264_ (
    .A(_028_),
    .B(_027_),
    .Y(_065_)
  );
  NAND _265_ (
    .A(_025_),
    .B(_046_),
    .Y(_030_)
  );
  NAND _266_ (
    .A(_131_),
    .B(_054_),
    .Y(_031_)
  );
  NAND _267_ (
    .A(_031_),
    .B(_030_),
    .Y(_066_)
  );
  NAND _268_ (
    .A(_025_),
    .B(_047_),
    .Y(_032_)
  );
  NAND _269_ (
    .A(_131_),
    .B(_055_),
    .Y(_033_)
  );
  NAND _270_ (
    .A(_033_),
    .B(_032_),
    .Y(_067_)
  );
  NAND _271_ (
    .A(_025_),
    .B(_048_),
    .Y(_034_)
  );
  NAND _272_ (
    .A(_131_),
    .B(_056_),
    .Y(_035_)
  );
  NAND _273_ (
    .A(_035_),
    .B(_034_),
    .Y(_068_)
  );
  NAND _274_ (
    .A(_025_),
    .B(_049_),
    .Y(_036_)
  );
  NAND _275_ (
    .A(_131_),
    .B(_057_),
    .Y(_037_)
  );
  NAND _276_ (
    .A(_037_),
    .B(_036_),
    .Y(_069_)
  );
  NAND _277_ (
    .A(_025_),
    .B(_050_),
    .Y(_039_)
  );
  NAND _278_ (
    .A(_131_),
    .B(_058_),
    .Y(_041_)
  );
  NAND _279_ (
    .A(_041_),
    .B(_039_),
    .Y(_070_)
  );
  NAND _280_ (
    .A(_025_),
    .B(_051_),
    .Y(_043_)
  );
  NAND _281_ (
    .A(_131_),
    .B(_059_),
    .Y(_044_)
  );
  NAND _282_ (
    .A(_044_),
    .B(_043_),
    .Y(_071_)
  );
  NOR _283_ (
    .A(_120_),
    .B(_113_),
    .Y(_073_)
  );
  DFF _284_ (
    .C(clk2f),
    .D(_148_[0]),
    .Q(st[0])
  );
  DFF _285_ (
    .C(clk2f),
    .D(_148_[1]),
    .Q(st[1])
  );
  DFF _286_ (
    .C(clk2f),
    .D(_148_[2]),
    .Q(st[2])
  );
  DFF _287_ (
    .C(clk2f),
    .D(_148_[3]),
    .Q(st[3])
  );
  DFF _288_ (
    .C(clk2f),
    .D(_148_[4]),
    .Q(st[4])
  );
  DFF _289_ (
    .C(clk2f),
    .D(_148_[5]),
    .Q(st[5])
  );
  DFF _290_ (
    .C(clk8f),
    .D(resetm),
    .Q(reset2)
  );
  DFF _291_ (
    .C(clk8f),
    .D(reset),
    .Q(resetm)
  );
  assign _148_[0] = _084_;
  assign _096_ = reset;
  assign _148_[5] = _019_;
  assign _148_[4] = _060_;
  assign _061_ = st[5];
  assign _062_ = st[2];
  assign _148_[3] = _075_;
  assign _148_[1] = _077_;
  assign _085_ = st[3];
  assign _088_ = st[4];
  assign _029_ = st[1];
  assign _038_ = valid_in_0_c;
  assign _040_ = valid_in_1_c;
  assign _042_ = data_in_0_c[0];
  assign _045_ = data_in_0_c[1];
  assign _046_ = data_in_0_c[2];
  assign _047_ = data_in_0_c[3];
  assign _048_ = data_in_0_c[4];
  assign _049_ = data_in_0_c[5];
  assign _050_ = data_in_0_c[6];
  assign _051_ = data_in_0_c[7];
  assign _052_ = data_in_1_c[0];
  assign _053_ = data_in_1_c[1];
  assign _054_ = data_in_1_c[2];
  assign _055_ = data_in_1_c[3];
  assign _056_ = data_in_1_c[4];
  assign _057_ = data_in_1_c[5];
  assign _058_ = data_in_1_c[6];
  assign _059_ = data_in_1_c[7];
  assign valid_out_c = _063_;
  assign data_out_c[0] = _064_;
  assign data_out_c[1] = _065_;
  assign data_out_c[2] = _066_;
  assign data_out_c[3] = _067_;
  assign data_out_c[4] = _068_;
  assign data_out_c[5] = _069_;
  assign data_out_c[6] = _070_;
  assign data_out_c[7] = _071_;
  assign _072_ = reset2;
  assign _148_[2] = _073_;
  assign _074_ = st[0];
endmodule

(* top =  1  *)
(* src = "proy1_conductual.v:5" *)
module proy1_synth(data_out_0_s, valid_out_0_s, data_out_1_s, valid_out_1_s, data_in_0, valid_in_0, data_in_1, valid_in_1, reset, clk8f, clkf_s, clk2f_s, clk4f_s);
  (* src = "proy1_conductual.v:17" *)
  output clk2f_s;
  (* src = "proy1_conductual.v:18" *)
  output clk4f_s;
  (* src = "proy1_conductual.v:15" *)
  input clk8f;
  (* src = "proy1_conductual.v:16" *)
  output clkf_s;
  (* src = "proy1_conductual.v:10" *)
  input [7:0] data_in_0;
  (* src = "proy1_conductual.v:12" *)
  input [7:0] data_in_1;
  (* src = "proy1_conductual.v:20" *)
  wire [7:0] data_mid_s;
  (* src = "proy1_conductual.v:6" *)
  output [7:0] data_out_0_s;
  (* src = "proy1_conductual.v:8" *)
  output [7:0] data_out_1_s;
  (* src = "proy1_conductual.v:14" *)
  input reset;
  (* src = "proy1_conductual.v:11" *)
  output valid_in_0;
  (* src = "proy1_conductual.v:13" *)
  output valid_in_1;
  (* src = "proy1_conductual.v:21" *)
  wire valid_mid_s;
  (* src = "proy1_conductual.v:7" *)
  output valid_out_0_s;
  (* src = "proy1_conductual.v:9" *)
  output valid_out_1_s;
  (* src = "proy1_conductual.v:37" *)
  demux_s demux_ (
    .clk2f(clk2f_s),
    .clk8f(clk8f),
    .data_in_c(data_mid_s),
    .data_out_0_s(data_out_0_s),
    .data_out_1_s(data_out_1_s),
    .reset(reset),
    .valid_in_c(valid_mid_s),
    .valid_out_0_s(valid_out_0_s),
    .valid_out_1_s(valid_out_1_s)
  );
  (* src = "proy1_conductual.v:24" *)
  clkgen_s generador_de_relojes (
    .clk2f_s(clk2f_s),
    .clk4f_s(clk4f_s),
    .clk8f(clk8f),
    .clkf_s(clkf_s),
    .reset(reset)
  );
  (* src = "proy1_conductual.v:26" *)
  mux_s mux_ (
    .clk2f(clk2f_s),
    .clk8f(clk8f),
    .data_in_0_c(data_in_0),
    .data_in_1_c(data_in_1),
    .data_out_c(data_mid_s),
    .reset(reset),
    .valid_in_0_c(valid_in_0),
    .valid_in_1_c(valid_in_1),
    .valid_out_c(valid_mid_s)
  );
endmodule
