/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

(* top =  1  *)
(* src = "Serie_Paralelo.v:3" *)
module S_P_Yosys(clk_8f, clk_f, data_in, reset,  valid_out_e,  parallel_out_e);
  (* src = "Serie_Paralelo.v:45" *)
  wire [2:0] _00_;
  (* src = "Serie_Paralelo.v:38" *)
  wire [7:0] _01_;
  (* src = "Serie_Paralelo.v:38" *)
  wire [2:0] _02_;
  (* src = "Serie_Paralelo.v:45" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  (* src = "Serie_Paralelo.v:13" *)
  wire [2:0] BC_counter;
  (* src = "Serie_Paralelo.v:12" *)
  wire [7:0] Data_P;
  (* src = "Serie_Paralelo.v:15" *)
  wire active;
  (* src = "Serie_Paralelo.v:13" *)
  wire [2:0] bit_counter;
  (* src = "Serie_Paralelo.v:3" *)
  input clk_8f;
  (* src = "Serie_Paralelo.v:4" *)
  input clk_f;
  (* src = "Serie_Paralelo.v:5" *)
  input data_in;
  (* src = "Serie_Paralelo.v:8" *)
  output [7:0]  parallel_out_e;
  (* src = "Serie_Paralelo.v:6" *)
  input reset;
  (* src = "Serie_Paralelo.v:7" *)
  output  valid_out_e;
  NOT _18_ (
    .A( valid_out_e),
    .Y(_04_)
  );
  NAND _19_ (
    .A(reset),
    .B(active),
    .Y(_05_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_04_),
    .Y(_03_)
  );
  NOT _21_ (
    .A(bit_counter[2]),
    .Y(_06_)
  );
  NOT _22_ (
    .A(reset),
    .Y(_16_)
  );
  NOR _23_ (
    .A(_16_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _24_ (
    .A(_07_),
    .B(data_in),
    .Y(_08_)
  );
  NAND _25_ (
    .A(reset),
    .B(bit_counter[2]),
    .Y(_09_)
  );
  NAND _26_ (
    .A(_09_),
    .B( valid_out_e),
    .Y(_10_)
  );
  NAND _27_ (
    .A(_10_),
    .B(_08_),
    .Y(_01_[7])
  );
  NOR _28_ (
    .A(_16_),
    .B(bit_counter[2]),
    .Y(_11_)
  );
  NAND _29_ (
    .A(_11_),
    .B(data_in),
    .Y(_12_)
  );
  NAND _30_ (
    .A(reset),
    .B(_06_),
    .Y(_13_)
  );
  NAND _31_ (
    .A(_13_),
    .B( valid_out_e),
    .Y(_14_)
  );
  NAND _32_ (
    .A(_14_),
    .B(_12_),
    .Y(_01_[0])
  );
  NAND _33_ (
    .A(_16_),
    .B(bit_counter[2]),
    .Y(_15_)
  );
  NAND _34_ (
    .A(_15_),
    .B(_13_),
    .Y(_02_[0])
  );
  NAND _35_ (
    .A(_16_),
    .B(_06_),
    .Y(_02_[1])
  );
  BUF _36_ (
    .A( valid_out_e),
    .Y(_00_[0])
  );
  BUF _37_ (
    .A( valid_out_e),
    .Y(_00_[1])
  );
  BUF _38_ (
    .A( valid_out_e),
    .Y(_00_[2])
  );
  BUF _39_ (
    .A( valid_out_e),
    .Y(_01_[6])
  );
  BUF _40_ (
    .A( valid_out_e),
    .Y(_01_[4])
  );
  BUF _41_ (
    .A( valid_out_e),
    .Y(_01_[3])
  );
  BUF _42_ (
    .A( valid_out_e),
    .Y(_01_[2])
  );
  NAND _43_ (
    .A(_16_),
    .B(_06_),
    .Y(_02_[2])
  );
  NOT _44_ (
    .A(reset),
    .Y(_17_)
  );
  DFF _45_ (
    .C(clk_f),
    .D(_03_),
    .Q( valid_out_e)
  );
  DFF _46_ (
    .C(clk_f),
    .D(_00_[0]),
    .Q( valid_out_e)
  );
  DFF _47_ (
    .C(clk_f),
    .D(_00_[1]),
    .Q( valid_out_e)
  );
  DFF _48_ (
    .C(clk_f),
    .D(_00_[2]),
    .Q( valid_out_e)
  );
  DFF _49_ (
    .C(clk_8f),
    .D(_01_[0]),
    .Q( valid_out_e)
  );
  DFF _50_ (
    .C(clk_8f),
    .D(_01_[2]),
    .Q( valid_out_e)
  );
  DFF _51_ (
    .C(clk_8f),
    .D(_01_[3]),
    .Q( valid_out_e)
  );
  DFF _52_ (
    .C(clk_8f),
    .D(_01_[4]),
    .Q( valid_out_e)
  );
  DFF _53_ (
    .C(clk_8f),
    .D(_01_[6]),
    .Q( valid_out_e)
  );
  DFF _54_ (
    .C(clk_8f),
    .D(_01_[7]),
    .Q( valid_out_e)
  );
  DFF _55_ (
    .C(clk_8f),
    .D(_02_[0]),
    .Q(bit_counter[2])
  );
  DFF _56_ (
    .C(clk_8f),
    .D(_02_[1]),
    .Q(bit_counter[2])
  );
  DFF _57_ (
    .C(clk_8f),
    .D(_02_[2]),
    .Q(bit_counter[2])
  );
  \$_DLATCH_P_  _58_ (
    .D(1'b1),
    .E(_16_),
    .Q(bit_counter[2])
  );
  \$_DLATCH_P_  _59_ (
    .D(1'b0),
    .E(_16_),
    .Q( valid_out_e)
  );
  \$_DLATCH_P_  _60_ (
    .D(reset),
    .E(_17_),
    .Q(active)
  );
  assign BC_counter = {  valid_out_e,  valid_out_e,  valid_out_e };
  assign Data_P = {  valid_out_e,  valid_out_e,  valid_out_e,  valid_out_e,  valid_out_e,  valid_out_e,  valid_out_e,  valid_out_e };
  assign bit_counter[1:0] = { bit_counter[2], bit_counter[2] };
  assign  parallel_out_e = {  valid_out_e,  valid_out_e,  valid_out_e,  valid_out_e,  valid_out_e,  valid_out_e,  valid_out_e,  valid_out_e };
endmodule
